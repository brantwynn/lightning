<?php

use Drupal\embed\Entity\EmbedButton;
use Drupal\file\Entity\File;
use Drupal\node\Entity\NodeType;
use Drupal\user\Entity\Role;
use Drupal\views\Entity\View;

/**
 * Implements hook_install().
 */
function lightning_media_install() {
  user_role_grant_permissions('anonymous', ['view media']);
  user_role_grant_permissions('authenticated', ['view media']);

  // Grant the content_creator role access to the rich_text filter format.
  lightning_media_update_8004();

  // Set the icon for the media_browser embed button.
  lightning_media_update_8006();
}

/**
 * Updates the media_library view, installs Services module, and creates the
 * lightning_media service endpoint.
 */
function lightning_media_update_8001() {
  if (! \Drupal::moduleHandler()->moduleExists('services')) {
    \Drupal::service('module_installer')->install(['services']);
  }

  // Update the media_library view by deleting and re-creating it.
  View::load('media_library')->delete();
  $values = lightning_read_config('views.view.media_library', 'lightning_media');
  View::create($values)->save();
}

/**
 * Activates Lightning Media sub-features.
 */
function lightning_media_update_8002() {
  $installer = \Drupal::service('module_installer');

  if (! \Drupal::moduleHandler()->moduleExists('features')) {
    $installer->install(['features']);
  }
  $installer->install([
    'lightning_media_image',
    'lightning_media_instagram',
    'lightning_media_twitter',
    'lightning_media_video',
  ]);
}

/**
 * Creates the Media Creator and Media Manager roles.
 */
function lightning_media_update_8003() {
  $role = Role::load('media_creator');
  if (empty($role)) {
    $values = lightning_read_config('user.role.media_creator', 'lightning_media');
    Role::create($values)->save();
  }

  $role = Role::load('media_manager');
  if (empty($role)) {
    $values = lightning_read_config('user.role.media_manager', 'lightning_media');
    Role::create($values)->save();
  }
}

/**
 * Grants the content-related roles access to the rich_text input roles.
 */
function lightning_media_update_8004() {
  $permissions = ['use text format rich_text'];

  /** @var \Drupal\node\NodeTypeInterface $node_type */
  foreach (NodeType::loadMultiple() as $node_type) {
    user_role_grant_permissions($node_type->id() . '_creator', $permissions);
    user_role_grant_permissions($node_type->id() . '_reviewer', $permissions);
  }
}

/**
 * Installs the embed button for the media browser.
 */
function lightning_media_update_8005() {
  $button = lightning_read_config('embed.button.media_browser', 'lightning_media');
  EmbedButton::create($button)->save();
}

/**
 * Sets the icon for the media browser's embed button.
 */
function lightning_media_update_8006() {
  $icon = \Drupal::moduleHandler()->getModule('lightning_media')->getPath() . '/images/star.png';
  $fs = \Drupal::service('file_system');
  $destination = file_unmanaged_copy($icon, 'public://' . $fs->basename($icon));

  if ($destination) {
    $file = File::create(['uri' => $destination]);
    $file->save();

    EmbedButton::load('media_browser')
      ->set('icon_uuid', $file->uuid())
      ->save();
  }
}

/**
 * Implements hook_update_dependencies().
 */
function lightning_media_update_dependencies() {
  return [
    'lightning_media' => [
      8004 => [
        'lightning' => 8002,
      ],
      8006 => [
        'lightning' => 8005,
      ],
    ],
  ];
}
